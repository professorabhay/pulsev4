{"name":"main.luanb","content":{"cellOrder":["0"],"cells":{"0":{"code":"\r\nHandlers.add(\r\n   \"SUBMIT_POST\",\r\n   \"SUBMIT_POST\",\r\n   function(msg)\r\n   print(\"bjbkj\")\r\n       -- Helper function to cleanup if something fails\r\n       local function cleanupOnFailure(postId)\r\n           if postId then\r\n               admin:apply('DELETE FROM post_hashtags WHERE post_id = ?;', { postId })\r\n               admin:apply('DELETE FROM posts WHERE post_id = ?;', { postId })\r\n           end\r\n       end\r\n\r\n       if not msg.Tags.content then\r\n           msg.reply({ Data = json.encode({\r\n               status = \"error\",\r\n               message = \"Content is required\"\r\n           })})\r\n           return\r\n       end\r\n\r\n       local address = msg.From\r\n       local content = msg.Tags.content\r\n       local mediaUrls = msg.Tags.media_urls or \"[]\"\r\n       local postExtraData = msg.Tags.post_extra_data or \"{}\"\r\n       local visibility = msg.Tags.visibility or \"public\"\r\n       local postId = msg.Tags.post_id\r\n\r\n       -- All validations...\r\n       if #content > 2000 then\r\n           msg.reply({ Data = json.encode({\r\n               status = \"error\",\r\n               message = \"Content cannot exceed 2000 characters\"\r\n           })})\r\n           return\r\n       end\r\n\r\n       -- Validate mediaUrls\r\n       if mediaUrls ~= \"[]\" then\r\n           local success, mediaList = pcall(json.decode, mediaUrls)\r\n           if not success then\r\n               msg.reply({ Data = json.encode({\r\n                   status = \"error\",\r\n                   message = \"Invalid JSON format in media_urls. Expected format: [\\\"url1\\\", \\\"url2\\\"]\"\r\n               })})\r\n               return\r\n           end\r\n\r\n           if type(mediaList) ~= \"table\" then\r\n               msg.reply({ Data = json.encode({\r\n                   status = \"error\",\r\n                   message = \"media_urls must be an array of URLs\"\r\n               })})\r\n               return\r\n           end\r\n\r\n           for _, url in ipairs(mediaList) do\r\n               if type(url) ~= \"string\" or\r\n                  not string.match(url, \"^https?://[%w-_%.%?%.:/%+=&]+$\") or\r\n                  #url > 200 then\r\n                   msg.reply({ Data = json.encode({\r\n                       status = \"error\",\r\n                       message = \"Invalid URL format or length in media_urls\"\r\n                   })})\r\n                   return\r\n               end\r\n           end\r\n       end\r\n\r\n       -- Validate postExtraData\r\n       if not pcall(function() json.decode(postExtraData) end) then\r\n           msg.reply({ Data = json.encode({\r\n               status = \"error\",\r\n               message = \"Invalid JSON format in post_extra_data\"\r\n           })})\r\n           return\r\n       end\r\n\r\n       -- Extract hashtags\r\n       local hashtags = {}\r\n       for tag in content:gmatch(\"#(%w+)\") do\r\n           hashtags[#hashtags + 1] = tag:lower()\r\n       end\r\n\r\n       -- Verify user exists\r\n       local userExists = admin:select('SELECT user_id FROM users WHERE address = ?;', { address })\r\n       if #userExists == 0 then\r\n           msg.reply({ Data = json.encode({\r\n               status = \"error\",\r\n               message = \"User not found. Please create a profile first\"\r\n           })})\r\n           return\r\n       end\r\n\r\n       local currentTime = msg.Timestamp\r\n       local finalPostId\r\n       local success, err = pcall(function()\r\n           if postId then\r\n               -- Check post ownership\r\n               local postExists = admin:select('SELECT post_id FROM posts WHERE post_id = ? AND address = ?;', { postId, address })\r\n               if #postExists == 0 then\r\n                   error(\"Post not found or you're not authorized to edit it\")\r\n               end\r\n               print(\"updating post..\")\r\n\r\n               -- Update post\r\n               admin:apply(\r\n                   [[UPDATE posts \r\n                     SET content = ?,\r\n                         media_urls = ?,\r\n                         post_extra_data = ?,\r\n                         visibility = ?,\r\n                         is_edited = 1,\r\n                         updated_at = ?\r\n                     WHERE post_id = ? AND address = ?;]],\r\n                   {content, mediaUrls, postExtraData, visibility, currentTime, postId, address}\r\n               )\r\n               \r\n               admin:apply('DELETE FROM post_hashtags WHERE post_id = ?;', { postId })\r\n               finalPostId = postId\r\n           else\r\n               -- Create new post\r\n               admin:apply(\r\n                   [[INSERT INTO posts \r\n                     (address, content, media_urls, post_extra_data, visibility, created_at, updated_at)\r\n                     VALUES (?, ?, ?, ?, ?, ?, ?);]],\r\n                   {address, content, mediaUrls, postExtraData, visibility, currentTime, currentTime}\r\n               )\r\n                print(\"made new post!\")\r\n                local postResult = admin:select(\r\n                    [[SELECT post_id FROM posts \r\n                    WHERE address = ? \r\n                    AND content = ? \r\n                    AND created_at = ?\r\n                    ORDER BY post_id DESC LIMIT 1;]], \r\n                    {address, content, currentTime}\r\n                )\r\n                finalPostId = postResult[1].post_id\r\n               print(\"Created new post with ID:\", finalPostId)\r\n           end\r\n\r\n           -- Process hashtags\r\n           for _, tag in ipairs(hashtags) do\r\n               print(\"Processing hashtag:\", tag)\r\n               -- Insert hashtag\r\n               admin:apply(\r\n                   [[INSERT OR IGNORE INTO hashtags (name, created_at) \r\n                     VALUES (?, ?);]], \r\n                   {tag, currentTime}\r\n               )\r\n               \r\n               -- Get hashtag_id using name\r\n               local hashtagResult = admin:select('SELECT hashtag_id FROM hashtags WHERE name = ?;', { tag })\r\n               if not hashtagResult[1] then\r\n                   error(\"Failed to create hashtag: \" .. tag)\r\n               end\r\n               \r\n               print(\"Linking post_id:\", finalPostId, \"with hashtag_id:\", hashtagResult[1].hashtag_id)\r\n               \r\n               -- Link hashtag to post\r\n               admin:apply(\r\n                   [[INSERT OR IGNORE INTO post_hashtags (post_id, hashtag_id) \r\n                     VALUES (?, ?);]],\r\n                   {finalPostId, hashtagResult[1].hashtag_id}\r\n               )\r\n           end\r\n       end)\r\n\r\n       if not success then\r\n           if not postId then\r\n               cleanupOnFailure(finalPostId)\r\n           end\r\n           msg.reply({ Data = json.encode({\r\n               status = \"error\",\r\n               message = \"Failed to \" .. (postId and \"update\" or \"create\") .. \" post\",\r\n               error = err\r\n           })})\r\n           return\r\n       end\r\n\r\n       -- Get final data for response\r\n       local postData = admin:select('SELECT * FROM posts WHERE post_id = ?;', { finalPostId })[1]\r\n       local postTags = admin:select([[\r\n           SELECT h.name \r\n           FROM hashtags h \r\n           JOIN post_hashtags ph ON h.hashtag_id = ph.hashtag_id \r\n           WHERE ph.post_id = ?;\r\n       ]], { finalPostId })\r\n       \r\n       local tagNames = {}\r\n       for _, tag in ipairs(postTags) do\r\n           table.insert(tagNames, tag.name)\r\n       end\r\n\r\n       msg.reply({ Data = json.encode({\r\n           status = \"success\",\r\n           message = postId and \"Post updated successfully\" or \"Post created successfully\",\r\n           data = {\r\n               post_id = postData.post_id,\r\n               address = postData.address,\r\n               content = postData.content,\r\n               media_urls = json.decode(postData.media_urls),\r\n               post_extra_data = json.decode(postData.post_extra_data),\r\n               visibility = postData.visibility,\r\n               is_edited = postData.is_edited,\r\n               hashtags = tagNames,\r\n               created_at = postData.created_at,\r\n               updated_at = postData.updated_at\r\n           }\r\n       })})\r\n   end\r\n)","output":"14","type":"CODE","editing":true}}},"language":"lua","type":"NOTEBOOK"}